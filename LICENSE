MIT License

Copyright (c) 2018 Grayson

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

#data = "54900 usec, 2480 usec 620 usec, 1240 usec 620 usec, 620 usec 620 usec, 1240 usec 620 usec, 600 usec 640 usec, 1220 usec 660 usec, 560 usec 640 usec, 600 usec 640 usec, 1240 usec 640 usec, 580 usec 640 usec, 600 usec 640 usec, 620 usec 620 usec, 620 usec 26000 usec, 2480 usec 620 usec, 1220 usec 640 usec, 620 usec 600 usec, 1240 usec 640 usec, 580 usec 640 usec, 1240 usec 620 usec, 620 usec 620 usec, 620 usec 620 usec, 1240 usec 620 usec, 620 usec 620 usec, 620 usec 620 usec, 620 usec 620 usec, 600 usec 26020 usec, 2480 usec 620 usec, 1240 usec 620 usec, 620 usec 620 usec, 1220 usec 640 usec, 580 usec 660 usec, 1220 usec 640 usec, 620 usec 600 usec, 620 usec 620 usec, 1240 usec 620 usec, 620 usec 620 usec, 620 usec 620 usec, 620 usec 620 usec, 620 usec 26000 usec, 2500 usec 600 usec, 1240 usec 620 usec, 620 usec 620 usec, 1240 usec 620 usec, 620 usec 620 usec, 1220 usec 640 usec, 620 usec 600 usec, 640 usec 600 usec, 1240 usec 640 usec, 600 usec 620 usec, 620 usec 620 usec, 620 usec 620 usec, 620 usec 26000 usec, 2480 usec 620 usec, 1240 usec 620 usec, 620 usec 620 usec, 1240 usec 620 usec, 620 usec 620 usec, 1220 usec 640 usec, 580 usec 640 usec, 600 usec 640 usec, 1240 usec 620 usec, 620 usec 620 usec, 600 usec 640 usec, 600 usec 640 usec, 620 usec 26020 usec, 2480 usec 600 usec, 1240 usec 620 usec, 620 usec 640 usec, 1180 usec 660 usec, 600 usec 640 usec, 1220 usec 640 usec, 600 usec 640 usec, 580 usec 660 usec, 1220 usec 640 usec, 580 usec 640 usec, 600 usec 640 usec, 600 usec 640 usec, 600 usec"
off = []
on = []
temp = []
def encode (String):
    i = 1
    inc = 0
    for x in range(0, len(data)):
        if(data[x].isdigit()):
            temp.extend(data[x])
            if(data[x+1].isalpha() or data[x+1].isspace()):
                num = int(''.join(map(str,temp)))
                del temp[:]
                if(i % 2 != 0):
                    off.append(num)
                    num = str(num)
                    print("delayMicroseconds("+ num + ");")
                    i += 1
                else:
                    on.append(num)
                    num = str(num)
                    print("pulseIR("+num+");")
                    i += 1
encode(data)
